#+TITLE: Mikrokosmos-JS
#+SUBTITLE: A small tutorial on λ-calculus
#+SETUPFILE: html.setup

* Testing Mikrokosmos-js
This is a test for MikrokosmosJS.

The following is the identity

#+BEGIN_EXPORT html
<div class="mikrojs-console">
<script type="text/mikrokosmos">
const = λa.λb.b
const const</script>
</div>
#+END_EXPORT

And some library fun!

#+BEGIN_EXPORT html
<div class="mikrojs-console">
<script type="text/mikrokosmos">
plus 3 4
and true true
:types on
fst</script>
</div>
#+END_EXPORT

* Boolean logic
** Booleans
[[https://en.wikipedia.org/wiki/Boolean_algebra][Boolean logic]] can be encoded in \lambda-calculus. In boolean logic, we
have two elements =true= and =false=; and some logical gates such as

  * the *and* gate, which outputs true if and only if its two inputs 
    are true.
  * the *or* gate, which outputs true if any of its inputs is true,
    or even if /both/ are true.
  * the *not* gate, which outpus true if and only if its input is
    false.

For example,

\[
\mathtt{not(\ or ( true, false )\ ) = not\ true = false}.
\]

Our intuition on what means to be a truth value is that it can
distinghish between two values (*true* or *false*) or two branches on
a program =(if ... else ...)=. We are going to use this intuition to
write an encoding of boolean values based on their ability to choose
between two branches. Maybe surprisingly, this encoding will be also
useful to write the usual boolean logic gates.

#+BEGIN_EXPORT html
<div class="mikrojs-console">
<script type="text/mikrokosmos">
# Church encoding of boolean truth values
true  = \a.\b.a
false = \a.\b.b
true
false</script>
</div>
#+END_EXPORT

Here, a truth value is a function on two elements that chooses one of them.

 - $\mathtt{true}\ a\ b  = a$
 - $\mathtt{false}\ a\ b = b$

This is called the *Church encoding* of the booleans, as it was
firstly used by Alonzo Church. This idea of defining a type based not
on its content but on how it can be used will appear later, when we
define more complex data structures.

#+BEGIN_EXPORT html
<div class="mikrojs-console">
<script type="text/mikrokosmos">
true id const
false id const
true true false
false true false</script>
</div>
#+END_EXPORT

In particular, =true= is exactly the same lambda term as =const=. This
is a very usual phenomenon in lambda calculus, where the same function
can be interpreted differently in different contexts. Mikrokosmos
allows us to have multiple names for the same term.

** If-else
The advantage of this way of encoding the boolean values is that they
can be easily used in combination with other lambda terms. In
particular, the way to encode an if-else is almost trivial: it is
already encoded on the lambda terms!

#+BEGIN_EXPORT HTML
<div class="mikrojs-console">
<script type="text/mikrokosmos">
# If true, then the id function will be returned
# if false, then the const function will be returned 
(\b. b id const) true
(\b. b id const) false</script>
</div>
#+END_EXPORT

If you really want to write an =if-else= function, it will be, quite
literally, the trivial one

#+BEGIN_EXPORT HTML
<div class="mikrojs-console">
<script type="text/mikrokosmos">
ifelse = \b.b
(ifelse true) id const
(ifelse false) id const</script>
</div>
#+END_EXPORT

** Logic gates
Usual operations on booleans can be defined too on this encoding and
they will be surprisingly easy if we think of booleans as functions
choosing from two terms.

#+BEGIN_EXPORT HTML
<div class="mikrojs-console">
<script type="text/mikrokosmos">
# The and gate takes two booleans and returns a true if and only if 
# the two given booleans are true. 
and = \p.\q.p q p
# Checking the truth table for the "and" gate
and true true
and true false
and false true
and false false</script>
</div>
#+END_EXPORT

*Exercise 2.1:* Think why this definition of the `and` gate works.
/Hint: think what happens when the first argument is a =true=./
/What happens if it is a =false=?/

The =or= gate can be defined in a similar way.

#+BEGIN_EXPORT HTML
<div class="mikrojs-console">
<script type="text/mikrokosmos">
# The or gate takes two booleans and returns a true if and only if
# any of them (or both) are true
or = \p.\q.p p q
# Checking the truth table for the "or" gate
or true true
or true false
or false true
or false false</script>
</div>
#+END_EXPORT

And finally, the negation operator is only a way of interchanging the two truth values

#+BEGIN_EXPORT HTML
<div class="mikrojs-console">
<script type="text/mikrokosmos">
not = \b.b false true
# Truth table for the "not" gate
not true
not false
not (and true true)</script>
</div>
#+END_EXPORT

** Exercises and more logical gates
The boolean logic implication operator works also as a boolean gate, it can be defined as

\[(a \to b) \equiv (\neg a) \vee b,\]

that is, the implication is true if both are true or if the premise is false.

#+BEGIN_EXPORT HTML
<div class="mikrojs-console">
<script type="text/mikrokosmos">
implies = \a.\b.or (not a) b
implies true true
implies true false
implies false true
implies false false</script>
</div>
#+END_EXPORT

*Exercise 2.2:* Compute the logic table for the implication using the
 previous definition.

#+BEGIN_EXPORT HTML
<div class="mikrojs-console">
<script type="text/mikrokosmos">
# -- Your solution goes here</script>
</div>
#+END_EXPORT

*Exercise 2.3:* Compute the following logic clauses using lambda calculus
 
 - True or false implies false.
 - False implies that: false implies false.
 - The negation of false and the negation of true both imply true.

#+BEGIN_EXPORT HTML
<div class="mikrojs-console">
<script type="text/mikrokosmos">
# -- Your solution goes here</script>
</div>
#+END_EXPORT

*Exercise 2.4:* Define the `xor` gate as a lambda term. The `xor` of
two boolean values must return a true if and only if *exactly one* of
them are true. Check also its logic table.
/Hint: you may want to use the already defined `not`./

#+BEGIN_EXPORT HTML
<div class="mikrojs-console">
<script type="text/mikrokosmos">
# -- Your solution goes here</script>
</div>
#+END_EXPORT

